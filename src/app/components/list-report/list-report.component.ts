import { Component, OnInit } from '@angular/core';
import { ColumnItem } from '../../models/column-item';
import { ActivatedRoute, Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { User } from '../../models/user';
import { PatientService } from '../../services/patient.service';
import { Patient } from '../../models/patient';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-list-report',
  standalone: false,
  templateUrl: './list-report.component.html',
  styleUrl: './list-report.component.scss',
})
export class ListReportComponent {
  reportType!: string;
  listOfColumns: ColumnItem[] = [];
  tableData: any[] = [];
  currentDate = new Date();
  currentUser: User | undefined;
  currentMonthDate: Date = new Date();

  constructor(private route: ActivatedRoute, private router: Router,
    private authService: AuthService,
    private patientService: PatientService
  ) {
    this.currentMonthDate = new Date();
    this.route.params.subscribe(params => {
      this.reportType = params['type'];
      this.setupReport();
    });
    this.authService.getCurrentUser().subscribe(user => {
      this.currentUser = user;
    })
  }

  onMonthChange(date: Date) {
    if (date) {
      this.currentMonthDate = date;
      this.setupReport();
    }
  }

  async setupReport(){
    if(this.reportType === 'patients'){
      await this.setupPatientsReport();
    }
    else if(this.reportType === 'interns'){
      await this.setupInternsReport();
    }
    else if(this.reportType === 'doctors'){
      this.setupDoctorsReport()
    }
    else{
      console.error('Unknown report type:', this.reportType);
      this.router.navigate(['/'])
    }
  }

  async setupPatientsReport(){
    this.listOfColumns = [
      {
        name: 'Hospital Number',
        key: 'hospitalNumber'
      },
      {
        name: 'Name',
        key: 'name'
      },
      {
        name: 'Gender',
        key: 'gender'
      },
      {
        name: 'Date Admission',
        key: 'dateOfAdmission'
      }
    ];

    this.patientService.getPatientsByAdmissionMonth(this.currentMonthDate.getMonth() + 1).subscribe((allpatients: Patient[]) =>{
      this.tableData = allpatients.map(patient =>({
        hospitalNumber: patient.hospitalNumber,
        name: patient.name,
        gender: patient.gender,
        dateOfAdmission: patient.dateOfAdmission
      ? new Date(patient.dateOfAdmission).toLocaleDateString('en-GB')
      : ''
      }))
    })
  }

  async setupInternsReport(){
    this.listOfColumns = [
      {
        name: 'Hospital Number',
        key: 'hospitalNumber'
      },
      {
        name: 'Name and surname',
        key: 'name'
      },
      {
        name: 'Start Date',
        key: 'startDate'
      },
      {
        name: 'End of rotation',
        key: 'endOfRotation'
      }
    ];

    const interns = await this.authService.getUsersByRoleAndVerifiedMonth('Intern',this.currentMonthDate.getMonth() + 1)
    this.tableData = interns.map(intern =>{
      const endOfRotation = intern.verifiedDate 
        ? new Date(intern.verifiedDate)
        : null;
      endOfRotation?.setMonth(endOfRotation?.getMonth() + 3);
      return {
        hospitalNumber: intern.usernumber,
        name: intern.firstName + ' ' + intern.lastName,
        startDate: intern.verifiedDate,
        endOfRotation: endOfRotation?.toLocaleDateString('en-GB')
      }
    })
  }

  async setupDoctorsReport(){
    this.listOfColumns = [
      {
        name: 'Hospital Number',
        key: 'hospitalNumber'
      },
      {
        name: 'Name and surname',
        key: 'name'
      },
      {
        name: 'Start Date',
        key: 'startDate'
      }
    ];

    const doctors = await this.authService.getUsersByRoleAndVerifiedMonth('Doctor',this.currentMonthDate.getMonth() + 1)
    this.tableData = doctors.map(doctor =>{
      return {
        hospitalNumber: doctor.usernumber,
        name: doctor.firstName + ' ' + doctor.lastName,
        startDate: doctor.verifiedDate,
      }
    })
  }

  downloadPdf() {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    // Add Logo
    // Assuming logo is 150x50 pixels
    // Logo
    const logoX = 14;
    const logoY = 10;
    const logoWidth = 40;
    const logoHeight = 20;
    doc.addImage('images/logo.jpeg', 'JPEG', logoX, logoY, logoWidth, logoHeight);

    // Header Text aligned to right of logo
    const textX = pageWidth - 60;
    const textY = logoY + 6;

    doc.setFontSize(12);
    doc.text(this.currentDate.toLocaleDateString('en-GB'), textX, textY);
    doc.text(
      `Generated by: ${this.currentUser?.firstName} ${this.currentUser?.lastName}`,
      textX,
      textY + 8
    );

    // Report Title (below the header block)
    doc.setFontSize(16);
    const title = `LIST OF CURRENT ${this.reportType.toUpperCase()}`;
    doc.setFontSize(16);
    doc.text(title, pageWidth / 2, logoY + logoHeight + 10, { align: 'center' });
    
    // Add Table
    autoTable(doc, {
      head: [this.listOfColumns.map(col => col.name)],
      body: this.tableData.map(row => 
        this.listOfColumns.map(col => {
          if (col.formatter) {
            return col.formatter(row[col.key || ""]);
          }
          return row[col.key || ""] || '';
        })
      ),
      startY: 45,
      styles: { fontSize: 10 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      theme: 'grid'
    });

    // Add Footer with Page Numbers
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.text(
        `Page ${i} of ${pageCount}`,
        doc.internal.pageSize.width / 2,
        doc.internal.pageSize.height - 10,
        { align: 'center' }
      );
    }

    // Save the PDF
    doc.save(`${this.reportType}-report-${this.currentDate.toISOString().split('T')[0]}.pdf`);
  }
}
