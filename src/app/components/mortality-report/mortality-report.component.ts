import { Component, OnInit } from '@angular/core';
import Chart from 'chart.js/auto';
import { ReportService } from '../../services/report.service';
import { ActivatedRoute, Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { ColumnItem } from '../../models/column-item';
import { MortalityReportDto } from '../../models/mortality-report-dto';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-mortality-report',
  standalone: false,
  templateUrl: './mortality-report.component.html',
  styleUrl: './mortality-report.component.scss'
})
export class MortalityReportComponent {
  currentUser: any;
  listOfColumns: ColumnItem[] = []
  mortalityReport: MortalityReportDto | undefined;
  chart: any = null
  currentYearDate: Date = new Date()
  currentYearNumber = new Date().getFullYear()

  constructor(private route: ActivatedRoute, private router: Router,
    private reportService: ReportService,
    private authService: AuthService){
    this.authService.getCurrentUser().subscribe(user => {
      this.currentUser = user;
    })
    this.setupReport();
  }
  async setupReport(){
    this.listOfColumns = [
      {
        name: 'Month',
        key: 'month'
      },
      {
        name: 'Admission',
        key: 'admissions'
      },
      {
        name: 'Death',
        key: 'deaths'
      },
      {
        name: 'Mortality Rate',
        key: 'mortalityRate',
        formatter: (value: any)=> value ? `${value.toFixed(2)}%` : '0%'
      }
    ];
    this.mortalityReport = await this.reportService.getMortalityReport(this.currentYearNumber)
    console.log(this.mortalityReport)
    this.setupChart();
  }

  setupChart(){
    if(this.chart){
      this.chart.destroy();
    }
    let labels: string[] = [];
    let admissions: number[] = [];
    let deaths: number[] = [];
    if(this.mortalityReport){
      this.mortalityReport.monthlyRecords.forEach(record => {
        labels.push(record.month);
        admissions.push(record.admissions);
        deaths.push(record.deaths);
      });
    }
    this.chart = new Chart('canvas', {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Deaths',
            data: deaths,
            borderWidth: 1,
          },
          {
            label: 'Admissions',
            data: admissions,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
            legend: {
                position: 'top',
            },
        },
        scales: {
            x: {
                title: {
                    display: true,
                    text: 'Months',
                    font: {
                        size: 14,
                        weight: 'bold'
                    }
                }
            },
            y: {
                beginAtZero: true,
                ticks: {
                    stepSize: 5
                },
                title: {
                    display: true,
                    text: 'Count',
                    font: {
                        size: 14,
                        weight: 'bold'
                    }
                }
            }
        }
      },
    });
  }

  onYearChange(yearDate: Date){
    this.currentYearNumber = yearDate.getFullYear();
    this.setupReport();
  }

  async downloadPdf() {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      // Add Logo
      const logoX = 14;
      const logoY = 10;
      const logoWidth = 40;
      const logoHeight = 20;
      doc.addImage('images/logo.jpeg', 'JPEG', logoX, logoY, logoWidth, logoHeight);

      // Header Text aligned to right of logo
      const textX = pageWidth - 60;
      const textY = logoY + 6;

      doc.setFontSize(12);
      doc.text(new Date().toLocaleDateString('en-GB'), textX, textY);
      doc.text(
        `Generated by: ${this.currentUser?.firstName} ${this.currentUser?.lastName}`,
        textX,
        textY + 8
      );

      // Report Title (below the header block)
      doc.setFontSize(16);
      const title = `ADMISSIONS VS DECEASED REPORT`;
      doc.text(title, pageWidth / 2, logoY + logoHeight + 10, { align: 'center' });

      // --- Add Summary for the Period ---
      doc.setFontSize(12);
      let totalAdmissions = 0;
      let totalDeaths = 0;
      let avgMortalityRate = 0;
      if (this.mortalityReport && this.mortalityReport.monthlyRecords.length > 0) {
        totalAdmissions = this.mortalityReport.monthlyRecords.reduce((sum, r) => sum + r.admissions, 0);
        totalDeaths = this.mortalityReport.monthlyRecords.reduce((sum, r) => sum + r.deaths, 0);
        avgMortalityRate = this.mortalityReport.monthlyRecords.reduce((sum, r) => sum + r.mortalityRate, 0) / this.mortalityReport.monthlyRecords.length;
      }
      const summaryY = logoY + logoHeight + 18;
      doc.text(
        `Summary for ${this.currentYearNumber}:`,
        20,
        summaryY
      );
      doc.text(
        `Total Admissions: ${totalAdmissions}`,
        20,
        summaryY + 7
      );
      doc.text(
        `Total Deaths: ${totalDeaths}`,
        20,
        summaryY + 14
      );
      doc.text(
        `Average Mortality Rate: ${avgMortalityRate.toFixed(2)}%`,
        20,
        summaryY + 21
      );

      // --- Add Chart Image ---
      if (this.chart) {
        const chartImage = this.chart.toBase64Image();
        const chartX = 20;
        const chartY = summaryY + 28; // Place chart below summary
        const chartWidth = pageWidth - 40;
        const chartHeight = 60;
        doc.addImage(chartImage, 'PNG', chartX, chartY, chartWidth, chartHeight);
      }

      // Prepare table data from mortalityReport
      let tableRows: any[] = [];
      if (this.mortalityReport && this.mortalityReport.monthlyRecords) {
        for (const record of this.mortalityReport.monthlyRecords) {
          const row = this.listOfColumns.map(col => {
            let value = (record as any)[col.key || ''];
            if (col.formatter) {
              return col.formatter(value);
            }
            return value !== undefined ? value : '';
          });
          tableRows.push(row);
        }
      }

      // Table below chart
      const tableStartY = summaryY + 28 + 60 + 10; // chartY + chartHeight + margin
      autoTable(doc, {
        head: [this.listOfColumns.map(col => col.name)],
        body: tableRows,
        startY: tableStartY,
        styles: { fontSize: 10 },
        headStyles: { fillColor: [41, 128, 185], textColor: 255 },
        theme: 'grid'
      });

      // Add Footer with Page Numbers
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text(
          `Page ${i} of ${pageCount}`,
          doc.internal.pageSize.width / 2,
          doc.internal.pageSize.height - 10,
          { align: 'center' }
        );
      }

      // Save the PDF
      const today = new Date();
      doc.save(`mortality-report-${this.currentYearNumber}-${today.toISOString().split('T')[0]}.pdf`);
    }
}
